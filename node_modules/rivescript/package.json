{
  "_from": "rivescript",
  "_id": "rivescript@2.0.0",
  "_inBundle": false,
  "_integrity": "sha512-f4tquL3McqFNBrpB4iN6WRk6nPOgdpcxTC5vQjQPB3is5SyJCsQJGtZv65WJpE0osrKxdaetD1sP126wKLj0EA==",
  "_location": "/rivescript",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "rivescript",
    "fetchSpec": "latest",
    "name": "rivescript",
    "raw": "rivescript",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/rivescript/-/rivescript-2.0.0.tgz",
  "_shasum": "c676f3060190d686117e018f5612ec276cf3eea6",
  "_spec": "rivescript",
  "_where": "C:\\Users\\dhruv\\Documents\\Aqueduct",
  "author": {
    "email": "root@kirsle.net",
    "name": "Noah Petherbridge",
    "url": "https://www.kirsle.net/"
  },
  "bugs": {
    "email": "root@kirsle.net",
    "url": "https://github.com/aichaos/rivescript-js/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Chris Taylor",
      "email": "christhebaron@gmail.com",
      "url": "https://github.com/ChrisTheBaron"
    },
    {
      "name": "dc",
      "email": "dc@biz.pikkle.com",
      "url": "https://github.com/dcsan"
    },
    {
      "name": "Gerrit",
      "url": "https://github.com/pyrox777"
    },
    {
      "name": "Greg Leuch",
      "email": "contact@gleu.ch",
      "url": "https://gleu.ch"
    },
    {
      "name": "Mark Downey",
      "email": "mark@thebakery.io",
      "url": "http://thebakery.io"
    },
    {
      "name": "Mike Rombout",
      "email": "mike.rombout1@gmail.com",
      "url": "http://www.mikero.nl/"
    },
    {
      "name": "Philip Nuzhnyi",
      "url": "https://github.com/callmephilip"
    },
    {
      "name": "pirelaurent",
      "url": "https://github.com/pirelaurent"
    }
  ],
  "dependencies": {
    "babel-loader": "^7.1.5",
    "babel-polyfill": "^6.26.0",
    "fs-readdir-recursive": "^1.0.0"
  },
  "deprecated": false,
  "description": "RiveScript is a scripting language for chatterbots, making it easy to write trigger/response pairs for building up a bot's intelligence.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-preset-env": "^1.7.0",
    "commander": "^2.19.0",
    "nodeunit": "^0.11.3",
    "uglify-js": "^3.4.9",
    "webpack": "^4.29.5",
    "webpack-cli": "^3.2.3"
  },
  "directories": {
    "doc": "docs",
    "lib": "src"
  },
  "files": [
    "Changes.md",
    "LICENSE",
    "README.md",
    "dist/",
    "docs/",
    "lib/",
    "rivescript.d.ts",
    "src/"
  ],
  "homepage": "https://www.rivescript.com/",
  "keywords": [
    "aiml",
    "artificial intelligence",
    "bot",
    "buddyscript",
    "chatbot",
    "chatscript",
    "chatterbot"
  ],
  "license": "MIT",
  "main": "src/rivescript.js",
  "name": "rivescript",
  "optionalDependencies": {},
  "readme": "# RiveScript-JS\n\n[![Build Status](https://travis-ci.org/aichaos/rivescript-js.svg?branch=master)](https://travis-ci.org/aichaos/rivescript-js)\n\n## INTRODUCTION\n\nThis is a RiveScript interpreter library for JavaScript. RiveScript is a\nscripting language for chatterbots, making it easy to write trigger/response\npairs for building up a bot's intelligence.\n\nThis library can be used both in a web browser or as a Node module.\nSee the `eg/` folder for examples.\n\n## NOTICE: CHANGES IN v2.0.0\n\nRiveScript v2.0.0 comes with a **massive** refactor of the codebase to\nimplement modern Async/Await features all throughout. The refactor now\nallows features like \"storing user variables directly in Redis\" or\n\"using asynchronous macros in conditionals\"\n\nBut it necessarily had to break some backwards compatibility -- slightly!\n-- by turning previously synchronous functions like `reply()` into\nasync ones that return Promises like `replyAsync()` did.\n\nSee the [Upgrading-v2](https://github.com/aichaos/rivescript-js/blob/master/Upgrading-v2.md) document for information on the changes\nand how to fix your code for the new version.\n\n## USAGE\n\n```javascript\nvar bot = new RiveScript();\n\n// Load a directory full of RiveScript documents (.rive files). This is for\n// Node.JS only: it doesn't work on the web!\nbot.loadDirectory(\"brain\").then(loading_done).catch(loading_error);\n\n// Load an individual file.\nbot.loadFile(\"brain/testsuite.rive\").then(loading_done).catch(loading_error);\n\n// Load a list of files all at once (the best alternative to loadDirectory\n// for the web!)\nbot.loadFile([\n  \"brain/begin.rive\",\n  \"brain/admin.rive\",\n  \"brain/clients.rive\"\n]).then(loading_done).catch(loading_error);\n\n// All file loading operations are asynchronous, so you need handlers\n// to catch when they've finished. If you use loadDirectory (or loadFile\n// with multiple file names), the success function is called only when ALL\n// the files have finished loading.\nfunction loading_done() {\n  console.log(\"Bot has finished loading!\");\n\n  // Now the replies must be sorted!\n  bot.sortReplies();\n\n  // And now we're free to get a reply from the brain!\n\n  // RiveScript remembers user data by their username and can tell\n  // multiple users apart.\n  let username = \"local-user\";\n\n  // NOTE: the API has changed in v2.0.0 and returns a Promise now.\n  bot.reply(username, \"Hello, bot!\").then(function(reply) {\n    console.log(\"The bot says: \" + reply);\n  });\n}\n\n// It's good to catch errors too!\nfunction loading_error(error, filename, lineno) {\n  console.log(\"Error when loading files: \" + error);\n}\n```\n\nThe distribution of RiveScript.js includes an interactive shell for testing your\nRiveScript bot, `shell.js`. Run it with Node and point it to a folder where you\nhave your RiveScript documents. Example:\n\n```bash\nnode shell.js eg/brain\n```\n\nOnce inside the shell you can chat with the bot using the RiveScript files in\nthat directory. For simple debugging you can type `/eval` to run single lines\nof JavaScript code. See `/help` for more.\n\nBoth shell scripts accept command line parameters:\n\n* `--debug`: enables verbose debug logging.\n* `--watch`: watch the reply folder for changes and automatically reload the\n  bot when files are modified.\n* `--utf8`: enables UTF-8 mode.\n\nWhen using RiveScript.js as a library, the synopsis is as follows:\n\n## DOCUMENTATION\n\nThere is generated Markdown and HTML documentation of the modules in the\n[docs](https://github.com/aichaos/rivescript-js/tree/master/docs) folder.\nThe main module is at [rivescript](https://github.com/aichaos/rivescript-js/blob/master/docs/rivescript.md).\n\nAlso check out the [**RiveScript Community Wiki**](https://github.com/aichaos/rivescript/wiki)\nfor common design patterns and tips & tricks for RiveScript.\n\n## INSTALLATION\n\nFor nodejs and other similar JavaScript engines, you can install this module\nthrough npm:\n\n`npm install rivescript`\n\nFor the web you can use the unpkg:\n\n```html\n<script src=\"https://unpkg.com/rivescript@latest/dist/rivescript.min.js\"></script>\n```\n\nThe git repository for this project includes ES2015+ source code. For\nES5 builds targeting older browsers and Node versions, check the\n[Releases](https://github.com/aichaos/rivescript-js/releases) tab. The compiled\ndistribution includes a `lib/` directory with ES5 sources to use with\nnode <= 6, and a `dist/` directory containing a \"browserified\" script that can be\nused on a web page.\n\nTo use on the web, just load `dist/rivescript.min.js` with a `<script>` tag\nlike usual.\n\n## EXAMPLES\n\nThere are examples available in the\n[eg/](https://github.com/aichaos/rivescript-js/tree/master/eg) directory of\nthis project on GitHub that show how to interface with a RiveScript bot in\na variety of ways--such as through a web browser or a telnet server--and other\ncode snippets and useful tricks.\n\n## RIVESCRIPT PLAYGROUND\n\nFor testing and sharing RiveScript snippets that use the JavaScript\nimplementation, check out the [RiveScript Playground](https://play.rivescript.com/).\n\nIt's a JSFiddle style web app for playing with RiveScript in your web browser\nand sharing code with others.\n\n<https://play.rivescript.com/>\n\n## UTF-8 SUPPORT\n\nVersion 1.0.5 adds **experimental** support for UTF-8 in RiveScript documents.\nIt is disabled by default. Enable it by passing a `true` value for the `utf8`\noption in the constructor.\n\nBy default (without UTF-8 mode on), triggers may only contain basic ASCII\ncharacters (no foreign characters), and the user's message is stripped of all\ncharacters except letters, numbers and spaces. This means that, for example,\nyou can't capture a user's e-mail address in a RiveScript reply, because of the\n@ and . characters.\n\nWhen UTF-8 mode is enabled, these restrictions are lifted. Triggers are only\nlimited to not contain certain metacharacters like the backslash, and the user's\nmessage is only stripped of backslashes and HTML angled brackets (to protect\nfrom obvious XSS if you use RiveScript in a web application). Additionally,\ncommon punctuation characters are stripped out, with the default set being\n`/[.,!?;:]/g`. This can be overridden by providing a new `RegExp` object as the\n`rs.unicodePunctuation` attribute. Example:\n\n```javascript\n// Make a new bot with UTF-8 mode enabled.\nvar bot = new RiveScript({utf8: true});\n\n// Override the punctuation characters that get stripped from the\n// user's message.\nbot.unicodePunctuation = new RegExp(/[.,!?;:]/g);\n```\n\nThe `<star>` tags in RiveScript will capture the user's \"raw\" input, so you\ncan write replies to get the user's e-mail address or store foreign characters\nin their name.\n\nThis has so far only been tested when run under Node. When served through a\nweb server, take extra care that your server sends the correct content encoding\nwith the RiveScript source files (`Content-Type: text/plain; charset=utf-8`).\n\nOne caveat to watch out for in UTF-8 mode is that punctuation characters are not\nremoved from a user's message, so if they include commas or exclamation marks\nit can impact the matching ability of your triggers (you should *absolutely\nnot* write an explicit punctuation mark on your trigger's side. Triggers should\nNOT contain symbols like `?` or `,` even with UTF-8 mode enabled, and while that\nmay work right now, a future update will probably rigidly enforce this).\n\n## BUILDING\n\nI use npm run scripts to handle various build tasks.\n\n* `npm run build` - Compiles the ES2015+ sources from `src/` with Babel and\n  outputs them into `lib/`\n* `npm run test` - Builds the source with Babel per above, builds the ES2015+\n  test scripts in `test/` and outputs them into `test.babel/` and then runs\n  `nodeunit` on it.\n* `npm run dist` - Produces a full distributable build. Source is built with\n  Babel and then handed off to webpack and uglify for browser builds.\n* `npm run webpack` - Creates `dist/rivescript.js` from the ES2015+ sources\n  directly from `src/` (using `babel-loader`). This command is independent from\n  `npm run build` and could be run without leaving any ES5 code sitting around.\n* `npm run uglify` - Minifies `dist/rivescript.js` to `dist/rivescript.min.js`\n* `npm run clean` - Clean up all the build files.\n\nIf your local Node version is >= 7 (supports Async/Await), you can run the\nES2015+ sources directly without needing to run any npm scripts. For that\npurpose, I have a Makefile.\n\n* `make setup` - sets up the dev environment, installs dependencies, etc.\n* `make run` - runs `shell.js` pointed at the example brain. This script runs\n  natively on the ES2015+ sources, no build steps needed.\n* `make test` - runs `nodeunit` on the ES2015+ test sources directly without\n  building them as `npm run test` would.\n\n## PUBLISHING\n\nSteps for the npm maintainer of this module:\n\n1. Increment the version number in `package.json` and `src/rivescript.js`\n2. Add a change log notice to `Changes.md`\n3. Run `npm run dist` to build the ES5 sources and run unit tests.\n3. Test a local installation from a different directory\n   (`npm install ../rivescript-js`)\n4. `npm login` if it's the first time on a new system, and `npm publish` to\n   publish the module to NPM.\n5. Create compiled zip and tarballs for GitHub releases:\n  * Copy git repo to a new folder.\n  * `rm -rf .git node_modules` to remove cruft from the new folder.\n  * `zip -r rivescript-js-VERSION.zip rivescript-js`\n  * `tar -czvf rivescript-js-VERSION.tar.gz rivescript-js`\n\n## LICENSE\n\n```\nThe MIT License (MIT)\n\nCopyright (c) 2017 Noah Petherbridge\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n## SEE ALSO\n\nThe official RiveScript website, http://www.rivescript.com/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aichaos/rivescript-js.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "build-tests": "babel test -d test.babel",
    "clean": "rm -rf dist lib test.babel",
    "dist": "npm run build; npm run webpack; npm run uglify",
    "prepublish": "npm run dist",
    "test": "npm run build; npm run build-tests; nodeunit test.babel/test-*.js",
    "uglify": "uglifyjs -o dist/rivescript.min.js dist/rivescript.js",
    "webpack": "webpack"
  },
  "typings": "rivescript.d.ts",
  "version": "2.0.0"
}
